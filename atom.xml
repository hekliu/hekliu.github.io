<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>刘庆龙 | Hekliu</title>
  
  <subtitle>不为失败找借口，只为成功找方法！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hekliu.github.io/"/>
  <updated>2019-09-30T09:05:35.367Z</updated>
  <id>https://hekliu.github.io/</id>
  
  <author>
    <name>刘庆龙</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>配置docker官方源并用yum安装docker</title>
    <link href="https://hekliu.github.io/2019/09/30/%E9%85%8D%E7%BD%AEdocker%E5%AE%98%E6%96%B9%E6%BA%90%E5%B9%B6%E7%94%A8yum%E5%AE%89%E8%A3%85docker/"/>
    <id>https://hekliu.github.io/2019/09/30/配置docker官方源并用yum安装docker/</id>
    <published>2019-09-30T08:12:07.000Z</published>
    <updated>2019-09-30T09:05:35.367Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、docker的官方安装文档："><a href="#一、docker的官方安装文档：" class="headerlink" title="一、docker的官方安装文档："></a>一、docker的官方安装文档：</h2><p><a href="https://docs.docker.com/engine/installation/linux/centos/" target="_blank" rel="noopener">https://docs.docker.com/engine/installation/linux/centos/</a><br>由docker给的文档可以看出它也只是去配置了一个docker的yum源、然后就通过这个源来安装docker了；在这个文档下我们采用手工配置的方式。</p><a id="more"></a><h2 id="二、配置一个docker用的源："><a href="#二、配置一个docker用的源：" class="headerlink" title="二、配置一个docker用的源："></a>二、配置一个docker用的源：</h2><pre><code>1.为docker 增加一个新的yum配置文件；</code></pre><figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch /etc/yum<span class="hljs-selector-class">.repos</span><span class="hljs-selector-class">.d</span>/docker.repo</span><br></pre></td></tr></table></figure><pre><code>2.docker.repo的内容如下</code></pre><figure class="highlight ini hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-section">[docker-ce-stable]</span></span><br><span class="line"><span class="hljs-attr">name</span>=Docker CE Stable - <span class="hljs-variable">$basearch</span></span><br><span class="line"><span class="hljs-attr">baseurl</span>=https://download.docker.com/linux/centos/<span class="hljs-number">7</span>/<span class="hljs-variable">$basearch</span>/stable</span><br><span class="line"><span class="hljs-attr">enabled</span>=<span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">0</span> #我把这里设置成了<span class="hljs-number">0</span>、说明我信任了这个源，不对它的rpm进行检察</span><br><span class="line"><span class="hljs-attr">gpgkey</span>=https://download.docker.com/linux/centos/gpg</span><br><span class="line"></span><br><span class="line"><span class="hljs-section">[docker-ce-stable-debuginfo]</span></span><br><span class="line"><span class="hljs-attr">name</span>=Docker CE Stable - Debuginfo <span class="hljs-variable">$basearch</span></span><br><span class="line"><span class="hljs-attr">baseurl</span>=https://download.docker.com/linux/centos/<span class="hljs-number">7</span>/debug-<span class="hljs-variable">$basearch</span>/stable</span><br><span class="line"><span class="hljs-attr">enabled</span>=<span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-attr">gpgkey</span>=https://download.docker.com/linux/centos/gpg</span><br><span class="line"></span><br><span class="line"><span class="hljs-section">[docker-ce-stable-source]</span></span><br><span class="line"><span class="hljs-attr">name</span>=Docker CE Stable - Sources</span><br><span class="line"><span class="hljs-attr">baseurl</span>=https://download.docker.com/linux/centos/<span class="hljs-number">7</span>/source/stable</span><br><span class="line"><span class="hljs-attr">enabled</span>=<span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-attr">gpgkey</span>=https://download.docker.com/linux/centos/gpg</span><br><span class="line"></span><br><span class="line"><span class="hljs-section">[docker-ce-edge]</span></span><br><span class="line"><span class="hljs-attr">name</span>=Docker CE Edge - <span class="hljs-variable">$basearch</span></span><br><span class="line"><span class="hljs-attr">baseurl</span>=https://download.docker.com/linux/centos/<span class="hljs-number">7</span>/<span class="hljs-variable">$basearch</span>/edge</span><br><span class="line"><span class="hljs-attr">enabled</span>=<span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-attr">gpgkey</span>=https://download.docker.com/linux/centos/gpg</span><br><span class="line"></span><br><span class="line"><span class="hljs-section">[docker-ce-edge-debuginfo]</span></span><br><span class="line"><span class="hljs-attr">name</span>=Docker CE Edge - Debuginfo <span class="hljs-variable">$basearch</span></span><br><span class="line"><span class="hljs-attr">baseurl</span>=https://download.docker.com/linux/centos/<span class="hljs-number">7</span>/debug-<span class="hljs-variable">$basearch</span>/edge</span><br><span class="line"><span class="hljs-attr">enabled</span>=<span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-attr">gpgkey</span>=https://download.docker.com/linux/centos/gpg</span><br><span class="line"></span><br><span class="line"><span class="hljs-section">[docker-ce-edge-source]</span></span><br><span class="line"><span class="hljs-attr">name</span>=Docker CE Edge - Sources</span><br><span class="line"><span class="hljs-attr">baseurl</span>=https://download.docker.com/linux/centos/<span class="hljs-number">7</span>/source/edge</span><br><span class="line"><span class="hljs-attr">enabled</span>=<span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-attr">gpgkey</span>=https://download.docker.com/linux/centos/gpg</span><br><span class="line"></span><br><span class="line"><span class="hljs-section">[docker-ce-test]</span></span><br><span class="line"><span class="hljs-attr">name</span>=Docker CE Test - <span class="hljs-variable">$basearch</span></span><br><span class="line"><span class="hljs-attr">baseurl</span>=https://download.docker.com/linux/centos/<span class="hljs-number">7</span>/<span class="hljs-variable">$basearch</span>/test</span><br><span class="line"><span class="hljs-attr">enabled</span>=<span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-attr">gpgkey</span>=https://download.docker.com/linux/centos/gpg</span><br><span class="line"></span><br><span class="line"><span class="hljs-section">[docker-ce-test-debuginfo]</span></span><br><span class="line"><span class="hljs-attr">name</span>=Docker CE Test - Debuginfo <span class="hljs-variable">$basearch</span></span><br><span class="line"><span class="hljs-attr">baseurl</span>=https://download.docker.com/linux/centos/<span class="hljs-number">7</span>/debug-<span class="hljs-variable">$basearch</span>/test</span><br><span class="line"><span class="hljs-attr">enabled</span>=<span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-attr">gpgkey</span>=https://download.docker.com/linux/centos/gpg</span><br><span class="line"></span><br><span class="line"><span class="hljs-section">[docker-ce-test-source]</span></span><br><span class="line"><span class="hljs-attr">name</span>=Docker CE Test - Sources</span><br><span class="line"><span class="hljs-attr">baseurl</span>=https://download.docker.com/linux/centos/<span class="hljs-number">7</span>/source/test</span><br><span class="line"><span class="hljs-attr">enabled</span>=<span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-attr">gpgkey</span>=https://download.docker.com/linux/centos/gpg</span><br></pre></td></tr></table></figure><h2 id="三、安装docker"><a href="#三、安装docker" class="headerlink" title="三、安装docker:"></a>三、安装docker:</h2><figure class="highlight vim hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-<span class="hljs-keyword">ce</span></span><br><span class="line">Loaded plugin<span class="hljs-variable">s:</span> fastestmirror, langpacks</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">Resolving Dependencies</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package docker-<span class="hljs-keyword">ce</span>.x86_64 <span class="hljs-number">0</span>:<span class="hljs-number">17.03</span>.<span class="hljs-number">1</span>.<span class="hljs-keyword">ce</span>-<span class="hljs-number">1</span>.el7.centos will <span class="hljs-keyword">be</span> installed</span><br><span class="line">--&gt; Processing Dependency: docker-<span class="hljs-keyword">ce</span>-selinux &gt;= <span class="hljs-number">17.03</span>.<span class="hljs-number">1</span>.<span class="hljs-keyword">ce</span>-<span class="hljs-number">1</span>.el7.centos <span class="hljs-keyword">for</span> package: docker-<span class="hljs-keyword">ce</span>-<span class="hljs-number">17.03</span>.<span class="hljs-number">1</span>.<span class="hljs-keyword">ce</span>-<span class="hljs-number">1</span>.el7.centos.x86_64</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package docker-<span class="hljs-keyword">ce</span>-selinux.noarch <span class="hljs-number">0</span>:<span class="hljs-number">17.03</span>.<span class="hljs-number">1</span>.<span class="hljs-keyword">ce</span>-<span class="hljs-number">1</span>.el7.centos will <span class="hljs-keyword">be</span> installed</span><br><span class="line">--&gt; Finished Dependency Resolution</span><br><span class="line"></span><br><span class="line">Dependencies Resolved</span><br><span class="line"></span><br><span class="line">=====================================================================================================================================</span><br><span class="line"> Package                          Arch                  Version                                Repository                       Size</span><br><span class="line">=====================================================================================================================================</span><br><span class="line">Installin<span class="hljs-variable">g:</span></span><br><span class="line"> docker-<span class="hljs-keyword">ce</span>                        x86_64                <span class="hljs-number">17.03</span>.<span class="hljs-number">1</span>.<span class="hljs-keyword">ce</span>-<span class="hljs-number">1</span>.el7.centos                docker-<span class="hljs-keyword">ce</span>-stable                 <span class="hljs-number">19</span> M</span><br><span class="line">Installing <span class="hljs-keyword">for</span> dependencie<span class="hljs-variable">s:</span></span><br><span class="line"> docker-<span class="hljs-keyword">ce</span>-selinux                noarch                <span class="hljs-number">17.03</span>.<span class="hljs-number">1</span>.<span class="hljs-keyword">ce</span>-<span class="hljs-number">1</span>.el7.centos                docker-<span class="hljs-keyword">ce</span>-stable                 <span class="hljs-number">28</span> <span class="hljs-keyword">k</span></span><br><span class="line"></span><br><span class="line">Transaction Summary</span><br><span class="line">=====================================================================================================================================</span><br><span class="line">Install  <span class="hljs-number">1</span> Package (+<span class="hljs-number">1</span> Dependent package)</span><br><span class="line"></span><br><span class="line">Total download size: <span class="hljs-number">19</span> M</span><br><span class="line">Installed size: <span class="hljs-number">19</span> M</span><br><span class="line">Is this ok [<span class="hljs-keyword">y</span>/d/<span class="hljs-keyword">N</span>]: <span class="hljs-keyword">y</span></span><br></pre></td></tr></table></figure><h2 id="四、直接下载rpm包的方式来安装："><a href="#四、直接下载rpm包的方式来安装：" class="headerlink" title="四、直接下载rpm包的方式来安装："></a>四、直接下载rpm包的方式来安装：</h2><p>　　1.我在安装docker的时候发现下载的速度只有 <code>3kB/s</code> ，然而文件大小有<code>19M</code>。就在我感觉安装无望的时候，我机智的想到了自己直接把rpm下载下来，看了下docker.repo 发现centos7的源地址是 <code>https://download.docker.com/linux/centos/7/$basearch/stable</code> 所以我只要去<code>https://download.docker.com/linux/centos/7/x86_64/stable/Packages/</code> 用迅雷(我是会员有加速)把rpm包下载下来就行了。</p><p><strong>下载如下文件：</strong></p><blockquote><p>docker-ce-17.03.0.ce-1.el7.centos.x86_64.rpm<br>docker-ce-selinux-17.03.0.ce-1.el7.centos.noarch.rpm</p></blockquote><h2 id="五、安装docker"><a href="#五、安装docker" class="headerlink" title="五、安装docker:"></a>五、安装docker:</h2><figure class="highlight vim hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">ll</span></span><br><span class="line">total <span class="hljs-number">19096</span></span><br><span class="line">-rwxrwxrwx <span class="hljs-number">1</span> jianglexing jianglexing <span class="hljs-number">19521288</span> May <span class="hljs-number">30</span> <span class="hljs-number">20</span>:<span class="hljs-number">05</span> docker-<span class="hljs-keyword">ce</span>-<span class="hljs-number">17.03</span>.<span class="hljs-number">0</span>.<span class="hljs-keyword">ce</span>-<span class="hljs-number">1</span>.el7.centos.x86_64.rpm</span><br><span class="line">-rw-r--r-- <span class="hljs-number">1</span> jianglexing jianglexing    <span class="hljs-number">29108</span> May <span class="hljs-number">30</span> <span class="hljs-number">20</span>:<span class="hljs-number">15</span> docker-<span class="hljs-keyword">ce</span>-selinux-<span class="hljs-number">17.03</span>.<span class="hljs-number">0</span>.<span class="hljs-keyword">ce</span>-<span class="hljs-number">1</span>.el7.centos.noarch.rpm</span><br><span class="line">[root@workstudio docker]# yum localinstall *</span><br><span class="line">Loaded plugin<span class="hljs-variable">s:</span> fastestmirror, langpacks</span><br><span class="line">Examining docker-<span class="hljs-keyword">ce</span>-<span class="hljs-number">17.03</span>.<span class="hljs-number">0</span>.<span class="hljs-keyword">ce</span>-<span class="hljs-number">1</span>.el7.centos.x86_64.rpm: docker-<span class="hljs-keyword">ce</span>-<span class="hljs-number">17.03</span>.<span class="hljs-number">0</span>.<span class="hljs-keyword">ce</span>-<span class="hljs-number">1</span>.el7.centos.x86_64</span><br><span class="line">Marking docker-<span class="hljs-keyword">ce</span>-<span class="hljs-number">17.03</span>.<span class="hljs-number">0</span>.<span class="hljs-keyword">ce</span>-<span class="hljs-number">1</span>.el7.centos.x86_64.rpm <span class="hljs-keyword">to</span> <span class="hljs-keyword">be</span> installed</span><br><span class="line">Examining docker-<span class="hljs-keyword">ce</span>-selinux-<span class="hljs-number">17.03</span>.<span class="hljs-number">0</span>.<span class="hljs-keyword">ce</span>-<span class="hljs-number">1</span>.el7.centos.noarch.rpm: docker-<span class="hljs-keyword">ce</span>-selinux-<span class="hljs-number">17.03</span>.<span class="hljs-number">0</span>.<span class="hljs-keyword">ce</span>-<span class="hljs-number">1</span>.el7.centos.noarch</span><br><span class="line">Marking docker-<span class="hljs-keyword">ce</span>-selinux-<span class="hljs-number">17.03</span>.<span class="hljs-number">0</span>.<span class="hljs-keyword">ce</span>-<span class="hljs-number">1</span>.el7.centos.noarch.rpm <span class="hljs-keyword">to</span> <span class="hljs-keyword">be</span> installed</span><br><span class="line">Resolving Dependencies</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package docker-<span class="hljs-keyword">ce</span>.x86_64 <span class="hljs-number">0</span>:<span class="hljs-number">17.03</span>.<span class="hljs-number">0</span>.<span class="hljs-keyword">ce</span>-<span class="hljs-number">1</span>.el7.centos will <span class="hljs-keyword">be</span> installed</span><br><span class="line">---&gt; Package docker-<span class="hljs-keyword">ce</span>-selinux.noarch <span class="hljs-number">0</span>:<span class="hljs-number">17.03</span>.<span class="hljs-number">0</span>.<span class="hljs-keyword">ce</span>-<span class="hljs-number">1</span>.el7.centos will <span class="hljs-keyword">be</span> installed</span><br><span class="line">--&gt; Finished Dependency Resolution</span><br><span class="line"></span><br><span class="line">Dependencies Resolved</span><br><span class="line"></span><br><span class="line">=====================================================================================================================================</span><br><span class="line"> Package                 Arch         Version                          Repository                                               Size</span><br><span class="line">=====================================================================================================================================</span><br><span class="line">Installin<span class="hljs-variable">g:</span></span><br><span class="line"> docker-<span class="hljs-keyword">ce</span>               x86_64       <span class="hljs-number">17.03</span>.<span class="hljs-number">0</span>.<span class="hljs-keyword">ce</span>-<span class="hljs-number">1</span>.el7.centos          /docker-<span class="hljs-keyword">ce</span>-<span class="hljs-number">17.03</span>.<span class="hljs-number">0</span>.<span class="hljs-keyword">ce</span>-<span class="hljs-number">1</span>.el7.centos.x86_64                <span class="hljs-number">65</span> M</span><br><span class="line"> docker-<span class="hljs-keyword">ce</span>-selinux       noarch       <span class="hljs-number">17.03</span>.<span class="hljs-number">0</span>.<span class="hljs-keyword">ce</span>-<span class="hljs-number">1</span>.el7.centos          /docker-<span class="hljs-keyword">ce</span>-selinux-<span class="hljs-number">17.03</span>.<span class="hljs-number">0</span>.<span class="hljs-keyword">ce</span>-<span class="hljs-number">1</span>.el7.centos.noarch        <span class="hljs-number">43</span> <span class="hljs-keyword">k</span></span><br><span class="line"></span><br><span class="line">Transaction Summary</span><br><span class="line">=====================================================================================================================================</span><br><span class="line">Install  <span class="hljs-number">2</span> Packages</span><br><span class="line"></span><br><span class="line">Total size: <span class="hljs-number">65</span> M</span><br><span class="line">Installed size: <span class="hljs-number">65</span> M</span><br><span class="line">Is this ok [<span class="hljs-keyword">y</span>/d/<span class="hljs-keyword">N</span>]: <span class="hljs-keyword">y</span></span><br><span class="line">Downloading package<span class="hljs-variable">s:</span></span><br><span class="line">Running transaction check</span><br><span class="line">Running transaction test</span><br><span class="line">Transaction test succeeded</span><br><span class="line">Running transaction</span><br><span class="line">  Installing : docker-<span class="hljs-keyword">ce</span>-selinux-<span class="hljs-number">17.03</span>.<span class="hljs-number">0</span>.<span class="hljs-keyword">ce</span>-<span class="hljs-number">1</span>.el7.centos.noarch                                                                  <span class="hljs-number">1</span>/<span class="hljs-number">2</span> </span><br><span class="line">setseboo<span class="hljs-variable">l:</span>  SELinux <span class="hljs-keyword">is</span> disabled.</span><br><span class="line">libsemanage.semanage_direct_install_info: Overriding docker module at lower priority <span class="hljs-number">100</span> with module at priority <span class="hljs-number">400</span>.</span><br><span class="line">  Installing : docker-<span class="hljs-keyword">ce</span>-<span class="hljs-number">17.03</span>.<span class="hljs-number">0</span>.<span class="hljs-keyword">ce</span>-<span class="hljs-number">1</span>.el7.centos.x86_64                                                                          <span class="hljs-number">2</span>/<span class="hljs-number">2</span> </span><br><span class="line">  Verifying  : docker-<span class="hljs-keyword">ce</span>-<span class="hljs-number">17.03</span>.<span class="hljs-number">0</span>.<span class="hljs-keyword">ce</span>-<span class="hljs-number">1</span>.el7.centos.x86_64                                                                          <span class="hljs-number">1</span>/<span class="hljs-number">2</span> </span><br><span class="line">  Verifying  : docker-<span class="hljs-keyword">ce</span>-selinux-<span class="hljs-number">17.03</span>.<span class="hljs-number">0</span>.<span class="hljs-keyword">ce</span>-<span class="hljs-number">1</span>.el7.centos.noarch                                                                  <span class="hljs-number">2</span>/<span class="hljs-number">2</span> </span><br><span class="line"></span><br><span class="line">Installed:</span><br><span class="line">  docker-<span class="hljs-keyword">ce</span>.x86_64 <span class="hljs-number">0</span>:<span class="hljs-number">17.03</span>.<span class="hljs-number">0</span>.<span class="hljs-keyword">ce</span>-<span class="hljs-number">1</span>.el7.centos                    docker-<span class="hljs-keyword">ce</span>-selinux.noarch <span class="hljs-number">0</span>:<span class="hljs-number">17.03</span>.<span class="hljs-number">0</span>.<span class="hljs-keyword">ce</span>-<span class="hljs-number">1</span>.el7.centos                   </span><br><span class="line"></span><br><span class="line">Complete!</span><br></pre></td></tr></table></figure><h2 id="六、启动docker"><a href="#六、启动docker" class="headerlink" title="六、启动docker:"></a>六、启动docker:</h2><figure class="highlight jboss-cli hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@workstudio docker]<span class="hljs-comment"># systemctl start docker</span></span><br><span class="line">[root@workstudio docker]<span class="hljs-comment"># ps -ef | grep docker</span></span><br><span class="line">root       4458      1  1 20<span class="hljs-function">:22</span> ?        00<span class="hljs-function">:00</span><span class="hljs-function">:00</span> <span class="hljs-string">/usr/bin/dockerd</span></span><br><span class="line">root       4465   4458  0 20<span class="hljs-function">:22</span> ?        00<span class="hljs-function">:00</span><span class="hljs-function">:00</span> docker-containerd -l unix:<span class="hljs-string">///var/run/docker/libcontainerd/docker-containerd.sock</span> <span class="hljs-params">--metrics-interval=0</span> <span class="hljs-params">--start-timeout</span> 2m <span class="hljs-params">--state-dir</span> <span class="hljs-string">/var/run/docker/libcontainerd/containerd</span> <span class="hljs-params">--shim</span> docker-containerd-shim <span class="hljs-params">--runtime</span> docker-runc</span><br><span class="line">root       4589   4333  0 20<span class="hljs-function">:22</span> pts/1    00<span class="hljs-function">:00</span><span class="hljs-function">:00</span> grep <span class="hljs-params">--color=auto</span> docker</span><br></pre></td></tr></table></figure><h2 id="七、测试docker是否能成功运行："><a href="#七、测试docker是否能成功运行：" class="headerlink" title="七、测试docker是否能成功运行："></a>七、测试docker是否能成功运行：</h2><figure class="highlight sqf hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@workstudio docker]<span class="hljs-meta"># docker run hello-world</span></span><br><span class="line">Unable <span class="hljs-keyword">to</span> <span class="hljs-built_in">find</span> <span class="hljs-built_in">image</span> <span class="hljs-string">'hello-world:latest'</span> locally</span><br><span class="line">latest: Pulling <span class="hljs-keyword">from</span> library/hello-world</span><br><span class="line"><span class="hljs-number">78445</span>dd45222: Pull complete </span><br><span class="line">Digest: sha256:c5515758d4c5e1e838e9cd307f6c6a0d620b5e07e6f927b07d05f6d12a1ac8d7</span><br><span class="line">Status: Downloaded newer <span class="hljs-built_in">image</span> <span class="hljs-keyword">for</span> hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello <span class="hljs-keyword">from</span> Docker!</span><br><span class="line">This message shows that your installation appears <span class="hljs-keyword">to</span> be working correctly.</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">To</span> generate this message, Docker took the following steps:</span><br><span class="line"> <span class="hljs-number">1</span>. The Docker client contacted the Docker daemon.</span><br><span class="line"> <span class="hljs-number">2</span>. The Docker daemon pulled the <span class="hljs-string">"hello-world"</span> <span class="hljs-built_in">image</span> <span class="hljs-keyword">from</span> the Docker Hub.</span><br><span class="line"> <span class="hljs-number">3</span>. The Docker daemon created a new container <span class="hljs-keyword">from</span> that <span class="hljs-built_in">image</span> which runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> <span class="hljs-number">4</span>. The Docker daemon streamed that output <span class="hljs-keyword">to</span> the Docker client, which sent it</span><br><span class="line">    <span class="hljs-keyword">to</span> your terminal.</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">To</span> <span class="hljs-keyword">try</span> something more ambitious, you can run an Ubuntu container <span class="hljs-keyword">with</span>:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, <span class="hljs-built_in">and</span> more <span class="hljs-keyword">with</span> a free Docker ID:</span><br><span class="line"> https:<span class="hljs-comment">//cloud.docker.com/</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">For</span> more examples <span class="hljs-built_in">and</span> ideas, visit:</span><br><span class="line"> https:<span class="hljs-comment">//docs.docker.com/engine/userguide/</span></span><br></pre></td></tr></table></figure><p>如果是第一次运行 <code>hello-world</code> ，这个 <code>docker-image</code> 由于它还不存在于本地，所以要下载它，这可能要用一点时间！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、docker的官方安装文档：&quot;&gt;&lt;a href=&quot;#一、docker的官方安装文档：&quot; class=&quot;headerlink&quot; title=&quot;一、docker的官方安装文档：&quot;&gt;&lt;/a&gt;一、docker的官方安装文档：&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/engine/installation/linux/centos/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.docker.com/engine/installation/linux/centos/&lt;/a&gt;&lt;br&gt;由docker给的文档可以看出它也只是去配置了一个docker的yum源、然后就通过这个源来安装docker了；在这个文档下我们采用手工配置的方式。&lt;/p&gt;
    
    </summary>
    
      <category term="docker" scheme="https://hekliu.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="https://hekliu.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>tomcat出现的PermGen Space问题</title>
    <link href="https://hekliu.github.io/2019/09/30/tomcat%E5%87%BA%E7%8E%B0%E7%9A%84PermGen-Space%E9%97%AE%E9%A2%98/"/>
    <id>https://hekliu.github.io/2019/09/30/tomcat出现的PermGen-Space问题/</id>
    <published>2019-09-30T06:04:27.000Z</published>
    <updated>2019-09-30T08:55:05.056Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><p>最近做项目碰到了让我纠结的问题，tomcat服务器运行一段时间，总是会自动报异常：<code>java.lang.OutOfmemoryError: PermGen Space</code> 的错误，导致项目无法正常运行。</p><a id="more"></a><h2 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h2><p>PermGen Space：指的是内存的永久保存区，该块内存主要是被JVM用来存放class和mete信息的，当class被加载loader 的时候就会被存储到该内存区中，与存放类的实例的 <code>heap</code> 区不同，java中的 <code>垃圾回收器GC</code> 不会在主程序运行期对PermGen space进行清理。</p><h2 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h2><p>当我们的应用中有很多的class时，很可能就会出现PermGen space的错误。<br>我们的tomcat在重启的时候，不是使用的 <code>./bin/shutdown.sh</code> 而是使用<code>kill -9 xxx</code>直接杀掉，这样的话，存在PermGen space里面的内存不会被释放的，这样多长进行 <code>kill</code> 之后，就会导致系统的内存被渐渐吃完了，直到最后tomcat报错。</p><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><p><strong>手动设置 <code>MaxPermSize</code> 的大小</strong></p><p>1.修改 <code>TOMCAT_HOME/bin/catalina.bat</code>文件<br>在<code>echo &quot;using CATALINA_BASE：$CATALINA_BASE&quot;</code>上面加入这一行内容：<br><figure class="highlight routeros hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">JAVA_OPTS</span>=%JAVA_OPTS% -server -XX:<span class="hljs-attribute">PermSize</span>=128m -XX:<span class="hljs-attribute">MaxPermSize</span>=512m</span><br></pre></td></tr></table></figure></p><p>2.如果是 <code>linux</code> 环境，则修改 <code>TOMCAT_HOME/bin/catalina.sh</code>:<br><figure class="highlight routeros hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attribute">JAVA_OPTS</span>=<span class="hljs-string">"<span class="hljs-variable">$JAVA_OPTS</span>"</span> -server -XX:<span class="hljs-attribute">PermSize</span>=128m -XX:<span class="hljs-attribute">MaxSize</span>=512m</span><br></pre></td></tr></table></figure></p><p>3.修改 <code>TOMCAT_HOME/bin/catalina.bat</code> 文件的内容：<br>在 <code>%_EXECJAVA% %JAVA_OPTS%</code> 后面添加 <code>-Xms=256m -Xmx512m</code> </p><p><strong><em>注意：前后有空格的</em></strong><br><strong><em>例如： <code>%_EXECJAVA% %JAVA_OPTS% -Xms=256m -Xmx512m(空格)</code>后面的内容不变</em></strong></p><p>1.在关闭重启 <code>tomcat</code> 的过程中使用 <code>shutdown.sh</code> 而不是 使用 <code>kill -9</code> </p><p>2.如果使用 <code>shutdown.sh</code> 不能将<code>tomcat</code>关掉的话，就必须要使用 <code>kill -9</code> 来关闭了，这个时候只有手动的来回收垃圾了： 在 <code>linux</code> 命令下执行如下的命令，把缓存给丢弃掉。</p><figure class="highlight awk hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="hljs-number">3</span> &gt; <span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/vm/</span>drop_caches</span><br></pre></td></tr></table></figure><blockquote><p>关于 <code>drop_caches</code>内容可以参考：<a href="https://blog.csdn.net/wyzxg/article/details/7279986" target="_blank" rel="noopener">drop_caches</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题：&quot;&gt;&lt;a href=&quot;#问题：&quot; class=&quot;headerlink&quot; title=&quot;问题：&quot;&gt;&lt;/a&gt;问题：&lt;/h2&gt;&lt;p&gt;最近做项目碰到了让我纠结的问题，tomcat服务器运行一段时间，总是会自动报异常：&lt;code&gt;java.lang.OutOfmemoryError: PermGen Space&lt;/code&gt; 的错误，导致项目无法正常运行。&lt;/p&gt;
    
    </summary>
    
      <category term="tomcat" scheme="https://hekliu.github.io/categories/tomcat/"/>
    
    
      <category term="java基础" scheme="https://hekliu.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>对于一些HashMap的一些疑问</title>
    <link href="https://hekliu.github.io/2018/10/16/%E5%AF%B9%E4%BA%8EHashMap%E7%9A%84%E4%B8%80%E4%BA%9B%E7%96%91%E9%97%AE/"/>
    <id>https://hekliu.github.io/2018/10/16/对于HashMap的一些疑问/</id>
    <published>2018-10-16T08:46:03.000Z</published>
    <updated>2019-09-30T09:29:00.240Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HashMap的结构"><a href="#HashMap的结构" class="headerlink" title="HashMap的结构"></a>HashMap的结构</h2><p>数组的寻址快，但是数据的插入与删除速度不行。链表的插入与删除速度快，但是寻址速度不行。 那有没有一种两者兼具的数据结构，答案肯定是有的，那就是hash表。 <code>HashMap</code> 就是根据 <code>数组+链表</code> 的方式组成了 <code>hash</code> 表：</p><a id="more"></a><p><img src="/images/pic-1.png" alt="" title="1.png"></p><h2 id="对于HashMap的一些疑问"><a href="#对于HashMap的一些疑问" class="headerlink" title="对于HashMap的一些疑问"></a>对于HashMap的一些疑问</h2><p><img src="/images/pic-2.png" alt="" title="2.png"></p><h4 id="一、HashMap的resize过程是什么样的？"><a href="#一、HashMap的resize过程是什么样的？" class="headerlink" title="一、HashMap的resize过程是什么样的？"></a>一、HashMap的resize过程是什么样的？</h4><p>HashMap在put的时候会先检查当前数组的length,如果插入新的值的时候使得 length &gt; 0.75f * size<code>（f为加载因子，可以在创建hashMap时指定）</code>的话，会将数组进行扩容为当前容量的<code>2</code>倍。 扩容之后必定要将原有 hashMap 中的值拷贝到新容量的hashMap 里面，HashMap 默认的容量为<code>16</code>，加载因子为<code>0.75</code>， 也就是说当HashMap 中Entry的个数超过 <code>16 * 0.75 = 12</code>时, 会将容量扩充为 <code>16 * 2 = 32</code>，然后重新计算元素在数组中的位置，这是一个非常耗时的操作，所以我们在使用HashMap的时候如果能预先知道Map中元素的大小，预设其大小能够提升其性能。 resize代码：</p><figure class="highlight haxe hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//HashMap数组扩容</span></span><br><span class="line"></span><br><span class="line">void resize(int <span class="hljs-keyword">new</span><span class="hljs-type">Capacity</span>) &#123;</span><br><span class="line"></span><br><span class="line">Entry[] oldTable = table;</span><br><span class="line"></span><br><span class="line">int oldCapacity = oldTable.length;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//如果当前的数组长度已经达到最大值，则不在进行调整</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;</span><br><span class="line"></span><br><span class="line">threshold = Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//根据传入参数的长度定义新的数组</span></span><br><span class="line"></span><br><span class="line">Entry[] <span class="hljs-keyword">new</span><span class="hljs-type">Table</span> = <span class="hljs-keyword">new</span> <span class="hljs-type">Entry</span>[<span class="hljs-keyword">new</span><span class="hljs-type">Capacity</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//按照新的规则，将旧数组中的元素转移到新数组中</span></span><br><span class="line"></span><br><span class="line">transfer(<span class="hljs-keyword">new</span><span class="hljs-type">Table</span>);</span><br><span class="line"></span><br><span class="line">table = <span class="hljs-keyword">new</span><span class="hljs-type">Table</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//更新临界值</span></span><br><span class="line"></span><br><span class="line">threshold = (int)(<span class="hljs-keyword">new</span><span class="hljs-type">Capacity</span> * loadFactor);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//旧数组中元素往新数组中迁移</span></span><br><span class="line"></span><br><span class="line">void transfer(Entry[] <span class="hljs-keyword">new</span><span class="hljs-type">Table</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//旧数组</span></span><br><span class="line"></span><br><span class="line">Entry[] src = table;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//新数组长度</span></span><br><span class="line"></span><br><span class="line">int <span class="hljs-keyword">new</span><span class="hljs-type">Capacity</span> = <span class="hljs-keyword">new</span><span class="hljs-type">Table</span>.length;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//遍历旧数组</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> (int j = <span class="hljs-number">0</span>; j &lt; src.length; j++) &#123;</span><br><span class="line"></span><br><span class="line">Entry e = src[j];</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">src[j] = <span class="hljs-literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">do</span> &#123;</span><br><span class="line"></span><br><span class="line">Entry next = e.next;</span><br><span class="line"></span><br><span class="line">int i = indexFor(e.hash, <span class="hljs-keyword">new</span><span class="hljs-type">Capacity</span>);<span class="hljs-comment">//放在新数组中的index位置</span></span><br><span class="line"></span><br><span class="line">e.next = <span class="hljs-keyword">new</span><span class="hljs-type">Table</span>[i];<span class="hljs-comment">//实现链表结构，新加入的放在链头，之前的的数据放在链尾</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">new</span><span class="hljs-type">Table</span>[i] = e;</span><br><span class="line"></span><br><span class="line">e = next;</span><br><span class="line"></span><br><span class="line">&#125; <span class="hljs-keyword">while</span> (e != <span class="hljs-literal">null</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是1.7中的代码，1.8中引入了红黑树的概念，代码会相对复杂一些。</p><h4 id="二、HashMap在扩容的时候为什么容量都是原来的2倍，即容量为2-n"><a href="#二、HashMap在扩容的时候为什么容量都是原来的2倍，即容量为2-n" class="headerlink" title="二、HashMap在扩容的时候为什么容量都是原来的2倍，即容量为2^n"></a>二、HashMap在扩容的时候为什么容量都是原来的2倍，即容量为2^n</h4><p>HashMap 在计算数组中key的位置时，使用的算法为：<br><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/* Returns index for hash code h. */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">indexFor</span><span class="hljs-params">(<span class="hljs-keyword">int</span> h, <span class="hljs-keyword">int</span> length)</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">// assert Integer.bitCount(length) == 1 : "length must be a non-zero power of 2"; </span></span><br><span class="line"><span class="hljs-keyword">return</span> h &amp; (length<span class="hljs-number">-1</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>即对key的hashcode 与当前数组容量 -1 进行与操作 我们假设有一个容量为分别为 15 和 16 的hashMap ，有两个key的hashcode 分别为 4 和 5 ，进行indexFor操作之后：</p><figure class="highlight lsl hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">H &amp; (length <span class="hljs-number">-1</span>) hash &amp; table.length<span class="hljs-number">-1</span> <span class="hljs-number">4</span> &amp; (<span class="hljs-number">15</span> - <span class="hljs-number">1</span>) <span class="hljs-number">0100</span> &amp; <span class="hljs-number">1110</span> = <span class="hljs-number">0100</span> <span class="hljs-number">5</span> &amp; （ <span class="hljs-number">15</span> <span class="hljs-number">-1</span> ） <span class="hljs-number">0101</span> &amp; <span class="hljs-number">1110</span> = <span class="hljs-number">01004</span> &amp; (<span class="hljs-number">16</span> - <span class="hljs-number">1</span>) <span class="hljs-number">0100</span> &amp; <span class="hljs-number">1111</span> = <span class="hljs-number">0100</span> <span class="hljs-number">5</span> &amp; （ <span class="hljs-number">16</span> <span class="hljs-number">-1</span> ） <span class="hljs-number">0101</span> &amp; <span class="hljs-number">1111</span> = <span class="hljs-number">0101</span></span><br></pre></td></tr></table></figure><p>我们能够看到在容量为16时进行indexFor操作之后获得相同结果的几率要比容量为15时的几率要小，这样能够减少出现hash冲突的几率，从而提高查询效率。<code>2 ^ n</code>是一个非常神奇的数字。</p><h4 id="三、put时出现相同的hashcode会怎样？"><a href="#三、put时出现相同的hashcode会怎样？" class="headerlink" title="三、put时出现相同的hashcode会怎样？"></a>三、put时出现相同的hashcode会怎样？</h4><p>hashMap 里面存储的Entry对象是由数组和链表组成的，当key的hashcode相同时，数组上这个位置存储的结构就是链表，这时会将新的值插入链表的表头。进行取值的时候会先获取到链表，再对链表进行遍历，通过key.equals方法获取到值。<code>（hashcode相同不代表对象相同，不要混淆hashcode和equals方法）</code>所以声明作final的对象，并且采用合适的equals()和hashCode()方法的话，将会减少碰撞的发生，提高效率。不可变性使得能够缓存不同键的hashcode，这将提高整个获取对象的速度，使用String，Interger这样的wrapper类作为键是非常好的选择。</p><h4 id="四、什么是循环链表？"><a href="#四、什么是循环链表？" class="headerlink" title="四、什么是循环链表？"></a>四、什么是循环链表？</h4><p>HashMap在遇到多线程的操作中，如果需要重新调整HashMap的大小时，多个线程会同时尝试去调整HashMap的大小，这时处在同一位置的链表的元素的位置会反过来，以为移动到新的<code>bucket</code>的时候，HashMap不会将新的元素放到尾部<code>（为了避免尾部遍历）</code>，这时可能会出现<code>A -&gt; B -&gt; A</code>的情况，从而出现死循环，这便是HashMap中的循环链表。 所以HashMap 是不适合用在多线程的情况下的，可以考虑尝试使用<code>HashTable</code> 或是 <code>ConcurrentHashMap</code></p><h4 id="五、如何正确使用HashMap提高性能"><a href="#五、如何正确使用HashMap提高性能" class="headerlink" title="五、如何正确使用HashMap提高性能"></a>五、如何正确使用HashMap提高性能</h4><p>在设置HashMap的时候指定其容量的大小，减少其resize的过程。</p><h4 id="六、JDK1-8对HashMap进行了哪些优化"><a href="#六、JDK1-8对HashMap进行了哪些优化" class="headerlink" title="六、JDK1.8对HashMap进行了哪些优化"></a>六、JDK1.8对HashMap进行了哪些优化</h4><p>jdk1.8在对hash冲突的key时，如果此bucket位置上的元素数量在10以下时，还是和原来一样使用链表来进行存储，这时寻址的时间复杂度为O(n),当元素数量超过10时，使用红黑树进行代替，这时寻址的时间复杂度为O(n)</p><h4 id="七、HashMap-与-HashTable、ConcurrentHashMap的区别"><a href="#七、HashMap-与-HashTable、ConcurrentHashMap的区别" class="headerlink" title="七、HashMap 与 HashTable、ConcurrentHashMap的区别"></a>七、HashMap 与 HashTable、ConcurrentHashMap的区别</h4><p>1.HashTable的方法是同步的，在方法的前面都有<code>synchronized</code>来同步，HashMap未经同步，所以在多线程场合要手动同步</p><p>2.HashTable不允许null值<code>(key和value都不可以)</code> ,HashMap允许null值<code>(key和value都可以)</code>。</p><p>3.HashTable有一个contains(Object value)功能和containsValue(Object value)功能一样。</p><p>4.HashTable使用Enumeration进行遍历，HashMap使用Iterator进行遍历。</p><p>5.HashTable中hash数组默认大小是11，增加的方式是 <code>old * 2 + 1</code>。HashMap中hash数组的默认大小是16，而且一定是2的指数。</p><p>6.哈希值的使用不同，HashTable直接使用对象的hashCode，而HashMap重新计算hash值，用与代替求</p><p>7.<code>ConcurrentHashMap</code>也是一种线程安全的集合类，他和HashTable也是有区别的，主要区别就是加锁的粒度以及如何加锁，<code>ConcurrentHashMap</code>的加锁粒度要比HashTable更细一点。将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问。</p><h4 id="八、ConcurrentHashMap-和-Hashtable-的区别"><a href="#八、ConcurrentHashMap-和-Hashtable-的区别" class="headerlink" title="八、ConcurrentHashMap 和 Hashtable 的区别"></a>八、ConcurrentHashMap 和 Hashtable 的区别</h4><p><code>ConcurrentHashMap</code> 和 <code>Hashtable</code> 的区别主要体现在实现线程安全的方式上不同。</p><h5 id="底层数据结构："><a href="#底层数据结构：" class="headerlink" title="底层数据结构："></a>底层数据结构：</h5><p>JDK1.7的 ConcurrentHashMap 底层采用 分段的数组+链表 实现，JDK1.8 采用的数据结构跟HashMap1.8的结构一样，数组+链表/红黑二叉树。Hashtable 和 JDK1.8 之前的 HashMap 的底层数据结构类似都是采用 <code>数组+链表</code> 的形式，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突而存在的；</p><h5 id="实现线程安全的方式（重要）："><a href="#实现线程安全的方式（重要）：" class="headerlink" title="实现线程安全的方式（重要）："></a>实现线程安全的方式（重要）：</h5><p>在JDK1.7的时候，<code>ConcurrentHashMap（分段锁）</code>对整个桶数组进行了分割分段(Segment)，每一把锁只锁容器其中一部分数据，多线程访问容器里不同数据段的数据，就不会存在锁竞争，提高并发访问率。<code>（默认分配16个Segment，比Hashtable效率提高16倍。）</code>到了 JDK1.8 的时候已经摒弃了Segment的概念，而是直接用 <code>Node数组+链表+红黑树</code>的数据结构来实现，并发控制使用 synchronized 和 CAS 来操作。<code>（JDK1.6以后 对 synchronized锁做了很多优化）</code>整个看起来就像是优化过且线程安全的 HashMap，虽然在JDK1.8中还能看到 Segment 的数据结构，但是已经简化了属性，只是为了兼容旧版本；</p><p>Hashtable(同一把锁) :使用 synchronized 来保证线程安全，效率非常低下。当一个线程访问同步方法时，其他线程也访问同步方法，可能会进入阻塞或轮询状态，如使用 put 添加元素，另一个线程不能使用 put 添加元素，也不能使用 get，竞争会越来越激烈效率越低。</p><h4 id="九、HashMap-多线程操作导致死循环问题"><a href="#九、HashMap-多线程操作导致死循环问题" class="headerlink" title="九、HashMap 多线程操作导致死循环问题"></a>九、HashMap 多线程操作导致死循环问题</h4><p>在多线程下，进行 put 操作会导致 HashMap 死循环，原因在于 HashMap 的扩容 resize()方法。由于扩容是新建一个数组，复制原数据到数组。由于数组下标挂有链表，所以需要复制链表，但是多线程操作有可能导致环形链表。复制链表过程如下:<br>以下模拟2个线程同时扩容。假设，当前 HashMap 的空间为2（临界值为1），hashcode 分别为 0 和 1，在散列地址 0 处有元素 A 和 B，这时候要添加元素 C，C 经过 hash 运算，得到散列地址为 1，这时候由于超过了临界值，空间不够，需要调用 resize 方法进行扩容，那么在多线程条件下，会出现条件竞争，模拟过程如下：</p><p>线程一：读取到当前的 HashMap 情况，在准备扩容时，线程二介入</p><p><img src="/images/pic-3.png" alt="" title="3.png"></p><p>线程二：读取 HashMap，进行扩容</p><p><img src="/images/pic-4.png" alt="" title="4.png"></p><p>线程一：继续执行</p><p><img src="/images/pic-5.png" alt="" title="5.png"></p><p>这个过程为，先将 A 复制到新的 hash 表中，然后接着复制 B 到链头<code>（A 的前边：B.next=A）</code>，本来 <code>B.next=null</code>，到此也就结束了<code>（跟线程二一样的过程）</code>，但是，由于线程二扩容的原因，将 <code>B.next=A</code>，所以，这里继续复制A，让 <code>A.next=B</code>，由此，环形链表出现：<code>B.next=A</code>; <code>A.next=B</code></p><h3 id="推荐阅读："><a href="#推荐阅读：" class="headerlink" title="推荐阅读："></a>推荐阅读：</h3><ul><li><a href="https://blog.csdn.net/fjse51/article/details/55260493" target="_blank" rel="noopener">jdk1.8中ConcurrentHashMap的实现原理</a></li><li><a href="https://crossoverjie.top/2018/07/23/java-senior/ConcurrentHashMap/" target="_blank" rel="noopener">HashMap? ConcurrentHashMap? 相信看完这篇没人能难住你！</a> </li><li><a href="http://www.yuanrengu.com/index.php/2017-01-17.html" target="_blank" rel="noopener">HASHMAP、HASHTABLE、CONCURRENTHASHMAP的原理与区别</a></li><li><a href="https://www.cnblogs.com/chengxiao/p/6842045.html" target="_blank" rel="noopener">ConcurrentHashMap实现原理及源码分析</a></li><li><a href="https://blog.csdn.net/jianghuxiaojin/article/details/52006118#commentBox" target="_blank" rel="noopener">java-并发-ConcurrentHashMap高并发机制-jdk1.8</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HashMap的结构&quot;&gt;&lt;a href=&quot;#HashMap的结构&quot; class=&quot;headerlink&quot; title=&quot;HashMap的结构&quot;&gt;&lt;/a&gt;HashMap的结构&lt;/h2&gt;&lt;p&gt;数组的寻址快，但是数据的插入与删除速度不行。链表的插入与删除速度快，但是寻址速度不行。 那有没有一种两者兼具的数据结构，答案肯定是有的，那就是hash表。 &lt;code&gt;HashMap&lt;/code&gt; 就是根据 &lt;code&gt;数组+链表&lt;/code&gt; 的方式组成了 &lt;code&gt;hash&lt;/code&gt; 表：&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://hekliu.github.io/categories/java/"/>
    
    
      <category term="java基础" scheme="https://hekliu.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>学习使用git</title>
    <link href="https://hekliu.github.io/2018/08/30/%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8git/"/>
    <id>https://hekliu.github.io/2018/08/30/学习使用git/</id>
    <published>2018-08-30T03:24:03.000Z</published>
    <updated>2019-09-30T09:38:47.405Z</updated>
    
    <content type="html"><![CDATA[<h3 id="GIT-（分布式版本控制系统）"><a href="#GIT-（分布式版本控制系统）" class="headerlink" title="GIT （分布式版本控制系统）"></a>GIT （分布式版本控制系统）</h3><p><code>Git(读音为/gɪt/)</code>是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。<code>Git</code> 是 <code>Linus Torvalds</code> 为了帮助管理 <code>Linux</code> 内核开发而开发的一个开放源码的版本控制软件。</p><a id="more"></a><ul><li><p>创建markdown文件</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">touch</span> <span class="hljs-selector-tag">README</span><span class="hljs-selector-class">.md</span></span><br></pre></td></tr></table></figure></li><li><p>创建.gitignore文件</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">touch</span> <span class="hljs-selector-class">.gitignore</span></span><br></pre></td></tr></table></figure></li><li><p>初始化仓库</p><figure class="highlight ebnf hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attribute">git init</span></span><br></pre></td></tr></table></figure></li><li><p>查看变化</p><figure class="highlight ebnf hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attribute">git status</span></span><br></pre></td></tr></table></figure></li><li><p>添加所有的变更文件</p><figure class="highlight dockerfile hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="hljs-keyword">add</span><span class="hljs-bash"> .</span></span><br></pre></td></tr></table></figure></li><li><p>只是提交到本地仓库中</p><figure class="highlight nginx hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attribute">git</span> commit -am <span class="hljs-string">'first commit init project'</span></span><br></pre></td></tr></table></figure></li><li><p>添加到远程仓库中</p><figure class="highlight dockerfile hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="hljs-keyword">add</span><span class="hljs-bash"> origin ’git地址’</span></span><br></pre></td></tr></table></figure></li><li><p>查看当前分支</p><figure class="highlight ebnf hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attribute">git branch</span></span><br></pre></td></tr></table></figure></li><li><p>本地仓库推送到远程仓库</p><figure class="highlight maxima hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="hljs-built_in">push</span> -u <span class="hljs-built_in">origin</span> master</span><br><span class="line"></span><br><span class="line"><span class="hljs-number">1</span>.如果是第一次整合项目到git上会提示失败，需要先git pull把现在远程分支上的文件拉到本地</span><br><span class="line">上来，</span><br><span class="line"><span class="hljs-number">2.</span>git <span class="hljs-built_in">push</span> -u <span class="hljs-built_in">origin</span> master，</span><br><span class="line"><span class="hljs-number">3</span>.如果再报错就强制推上去，git <span class="hljs-built_in">push</span> -u -f <span class="hljs-built_in">origin</span> master;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>查看远程分支</p><figure class="highlight armasm hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-symbol">git</span> <span class="hljs-keyword">branch </span>-r</span><br></pre></td></tr></table></figure></li><li><p>在远程master上开一个v1.0分支</p><figure class="highlight armasm hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-symbol">git</span> checkout -<span class="hljs-keyword">b </span><span class="hljs-built_in">v1</span>.<span class="hljs-number">0</span> origin/master</span><br></pre></td></tr></table></figure></li><li><p>查看是否切换到新建的分支</p><figure class="highlight ebnf hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attribute">git branch</span></span><br></pre></td></tr></table></figure></li><li><p>推送分支到远程</p><figure class="highlight maxima hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> HEAD -u</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;GIT-（分布式版本控制系统）&quot;&gt;&lt;a href=&quot;#GIT-（分布式版本控制系统）&quot; class=&quot;headerlink&quot; title=&quot;GIT （分布式版本控制系统）&quot;&gt;&lt;/a&gt;GIT （分布式版本控制系统）&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Git(读音为/gɪt/)&lt;/code&gt;是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。&lt;code&gt;Git&lt;/code&gt; 是 &lt;code&gt;Linus Torvalds&lt;/code&gt; 为了帮助管理 &lt;code&gt;Linux&lt;/code&gt; 内核开发而开发的一个开放源码的版本控制软件。&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="https://hekliu.github.io/categories/git/"/>
    
    
      <category term="git的使用" scheme="https://hekliu.github.io/tags/git%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
</feed>
